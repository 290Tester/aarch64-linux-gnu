name: GCC+LLD Build

on:
  push:
  schedule:
    - cron: '0 0 * * 0,4'   # 每周日、四 UTC 00:00
  workflow_dispatch:

jobs:
  build-arm64-tc:
    runs-on: ubuntu-22.04-arm
    name: arm64 build

    steps:
    - uses: actions/checkout@v3

    - name: Set build date
      id: get-date
      run: echo "date=$(TZ=Asia/Ho_Chi_Minh date -u +%Y%m%d)" >> $GITHUB_OUTPUT

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential flex bison texinfo gawk libtool automake \
          libncurses5-dev libmpc-dev libmpfr-dev libgmp-dev \
          libexpat1-dev bc zlib1g-dev libssl-dev clang lld ninja-build \
          gcc g++ gperf curl wget git

    - name: Build & Push
      env:
        GITHUB_EMAIL: ${{ secrets.EMAIL }}
        GITHUB_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        GITHUB_USER: ${{ secrets.USERNAME }}
      run: |
        set -e
        git config --global user.name  "$GITHUB_USER"
        git config --global user.email "$GITHUB_EMAIL"

        git clone https://"$GITHUB_USER":"$GITHUB_TOKEN"@github.com/mvaisakh/arm64-gcc ../gcc-arm64 -b gcc-master
        rm -rf ../gcc-arm64/*
        chmod +x build-*.sh

        ./build-gcc.sh -a arm64
        ./build-lld.sh -a arm64

        script_dir=$PWD
        cd ../gcc-arm64
        ./bin/aarch64-elf-gcc -v 2>&1 | tee /tmp/gcc-version
        ./bin/aarch64-elf-ld.lld -v 2>&1 | tee /tmp/lld-arm64-version

        bash "$script_dir/strip-binaries.sh"
        git add . -f
        git commit -as \
          -m "Import ARM64 GCC ${{ steps.get-date.outputs.date }}" \
          -m "Build completed on: $(date)" \
          -m "GCC: $(cat /tmp/gcc-version)" \
          -m "LLD: $(cat /tmp/lld-arm64-version)"
        git push origin gcc-master -f

  build-arm-tc:
    runs-on: ubuntu-latest
    container:
      image: arm64v8/fedora:35   # 这里用 Fedora，所以下面可用 dnf

    steps:
    - uses: actions/checkout@v3

    - name: Set build date
      id: get-date
      run: echo "date=$(TZ=Asia/Kolkata date -u +%Y%m%d)" >> $GITHUB_OUTPUT

    - name: Install dependencies
      run: |
        dnf groupinstall -y "Development Tools"
        dnf install -y \
          mpfr-devel gmp-devel libmpc-devel zlib-devel \
          glibc-devel.i686 glibc-devel binutils-devel gcc-c++ \
          texinfo bison flex cmake ninja-build clang lld bzip2 git

    - name: Build & Push
      env:
        GITHUB_EMAIL: ${{ secrets.EMAIL }}
        GITHUB_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        GITHUB_USER: ${{ secrets.USERNAME }}
      run: |
        set -e
        git config --global user.name  "$GITHUB_USER"
        git config --global user.email "$GITHUB_EMAIL"

        git clone https://"$GITHUB_USER":"$GITHUB_TOKEN"@github.com/mvaisakh/gcc-arm ../gcc-arm -b gcc-master
        rm -rf ../gcc-arm/*
        chmod +x build-*.sh

        ./build-gcc.sh -a arm
        ./build-lld.sh -a arm

        script_dir=$PWD
        cd ../gcc-arm
        ./bin/arm-eabi-gcc -v 2>&1 | tee /tmp/gcc-arm-version
        ./bin/arm-eabi-ld.lld -v 2>&1 | tee /tmp/lld-arm-version

        bash "$script_dir/strip-binaries.sh"
        git add . -f
        git commit -as \
          -m "Import ARM GCC ${{ steps.get-date.outputs.date }}" \
          -m "Build completed on: $(date)" \
          -m "GCC: $(cat /tmp/gcc-arm-version)" \
          -m "LLD: $(cat /tmp/lld-arm-version)"
        git push origin gcc-master -f
